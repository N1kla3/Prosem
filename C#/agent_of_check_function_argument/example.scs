/*
using System;

public class Program
{
	public static void Main()
   	{
        Add(2,3);
        Add(2,"3");
  		Add(2);
    }
    public static int Add(int a, int b){
    	return a + b;
    }
}
*/
example=[*
    ..Global_of_example => nrel_using: System;;
    System =>nrel_identifier: [System]; <-concept_namespace;;
    concept_class-> ..Program (*
        =>nrel_identifier: [Program];;
        =>nrel_method_list: ..method_list_of_Program(*
            ->rrel_main: rrel_public: rrel_static: ..Main_of_Program(*
                <-concept_function;;
                <-concept_method;;
                =>nrel_identifier:[Main];;
                =>nrel_return_type: concept_void;;
                =>nrel_function_body: ..body_of_Main_function(*
                    <-concept_code_block;;
                    ->rrel_1: ..call_1(*
                        =>nrel_identifier:[Add(2,3)];;
                        <-called_function;;
                        =>nrel_function_prototype: ..Add_of_Program;;
                        =>nrel_argument: ...(*
                            <-concept_arguments;;
                            ->rrel_1: ..2_int(*<-concept_int;;<-number;;=>nrel_identifier:[2];;*);;
                            ->rrel_2: ..3_int(*<-concept_int;;<-number;;=>nrel_identifier:[3];;*);;
                        *);;
                    *);;
                    ->rrel_2: ..call_2(*
                        =>nrel_identifier:[Add(2,"3")];;
                        <-called_function;;
                        =>nrel_function_prototype: ..Add_of_Program;;
                        =>nrel_argument: ...(*
                            <-concept_arguments;;
                            ->rrel_1: ..2_int(*<-concept_int;;<-number;;=>nrel_identifier:[2];;*);;
                            ->rrel_2: ..3_string(*<-concept_string;;=>nrel_identifier:[3];;*);;
                        *);;
                    *);;
                    ->rrel_3: ..call_3(*
                        =>nrel_identifier:[Add(2)];;
                        <-called_function;;
                        =>nrel_function_prototype: ..Add_of_Program;;
                        =>nrel_argument: ...(*
                            <-concept_arguments;;
                            ->rrel_1: 2(*<-concept_int;;<-number;;=>nrel_identifier:[2];;*);;
                        *);;
                    *);;
                *);;
            *);;
            ->rrel_public:rrel_static: ..Add_of_Program(*
                <-concept_function;;
                <-concept_method;;
                =>nrel_identifier: [Add];;
                =>nrel_return_type: concept_int;;
                =>nrel_parameter_list: ..parameter_list_of_Add_of_Program(*
                    ->rrel_1: ..a_of_Add_of_Program(*<-concept_int;;*);;
                    ->rrel_2: ..b_of_Add_of_Program(*<-concept_int;;*);;
                *);;
                =>nrel_function_body: ..body_of_Add_function(*
                    <-concept_code_block;;
                    ->rrel_1:...(*
                        <-concept_return_statement;;
                        =>nrel_return_value: ...(*
                            <=nrel_value: ...(*
                                <-called_function;;
				                =>nrel_function_prototype:operator_addition;;
				                =>nrel_argument:...(*
						            <-concept_variable;;
						            ->rrel_1:..a_of_Add_of_Program;;
						            ->rrel_2:..b_of_Add_of_Program;;
                				*);;
                            *);;
                        *);;
                    *);;
                *);;
            *);;
        *);;
    *);;
*];;